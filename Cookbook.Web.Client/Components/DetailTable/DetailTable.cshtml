@typeparam TItem

@inject HttpClient http
@inject IUriHelper uriHelper

<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">#</th>
            @HeaderTemplate
            @if (IsTracable || IsTrackable) {
                <th scope="col">Created</th>
                <th scope="col">Updated</th>
            }
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Items) {
            <tr>
                <th scope="row" class="align-middle">@(((IIdProperty)item).Id)</th>
                @RowTemplate(item)
                @if (IsTracable || IsTrackable) {
                    <td class="small">
                        @if (IsTrackable) {
                            @((item as ITrackableDto)?.CreatedBy?.UserName ?? "<unknown>")
                        }
                        @if (IsTrackable && IsTracable) {
                            <br/>
                        }
                        @if (IsTracable) {
                            @((item as ITracableDto)?.CreatedOn)
                        }
                    </td>
                    <td class="small">
                        @if (IsTrackable) {
                            @((item as ITrackableDto)?.UpdatedBy?.UserName ?? "<unknown>")
                        }
                        @if (IsTrackable && IsTracable) {
                            <br/>
                        }
                        @if (IsTracable) {
                            @((item as ITracableDto)?.UpdatedOn)
                        }
                    </td>
                }
                <td>
                    <button onclick="@(_ => OnSave?.Invoke(item))" class="btn btn-primary">
                        <i class="fa fa-save"></i>
                    </button>
                    <button onclick="@(_ => OnDelete?.Invoke(item))" class="btn btn-danger">
                        <i class="fa fa-times"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td></td>
            @RowTemplate(NewItem)
            @if (IsTrackable || IsTracable) {
                <td></td>
                <td></td>
            }
            <td>
                <button onclick="@(_ => OnAdd?.Invoke(NewItem))" class="btn btn-success">
                    <i class="fa fa-plus"></i>
                </button>
            </td>
        </tr>
    </tfoot>
</table>

@functions {

    //Data
    [Parameter]
    private IEnumerable<TItem> Items { get; set; }

    //Templates
    [Parameter]
    private RenderFragment HeaderTemplate { get; set; }

    [Parameter]
    private RenderFragment<TItem> RowTemplate { get; set; }

    //Events
    [Parameter]
    private Action<TItem> OnSave { get; set; }

    [Parameter]
    private Action<TItem> OnDelete { get; set; }

    [Parameter]
    private Action<TItem> OnAdd { get; set; }

    private TItem NewItem { get; set; } = Activator.CreateInstance<TItem>();

    private bool IsTracable => typeof(ITracableDto).IsAssignableFrom(typeof(TItem));

    private bool IsTrackable => typeof(ITrackableDto).IsAssignableFrom(typeof(TItem));

}