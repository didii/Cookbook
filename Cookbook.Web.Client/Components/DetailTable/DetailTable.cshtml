@typeparam TItem

@inject HttpClient http
@inject IUriHelper uriHelper

<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">#</th>
            @HeaderTemplate
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Items) {
            <tr>
                <th scope="row" class="align-middle">@(((IIdProperty)item).Id)</th>
                @RowTemplate(item)
                <td>
                    <button onclick="@(_ => OnSave?.Invoke(item))" class="btn btn-primary"><i class="fa fa-edit"></i></button>
                    <button onclick="@(_ => OnDelete?.Invoke(item))" class="btn btn-danger"><i class="fa fa-times"></i></button>
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td></td>
            @RowTemplate(NewItem)
            <td>
                <button onclick="@(_ => OnAdd?.Invoke(NewItem))" class="btn btn-success"><i class="fa fa-plus"></i></button>
            </td>
        </tr>
    </tfoot>
</table>



@functions {

    //Data
    [Parameter]
    private IEnumerable<TItem> Items { get; set; }

    //Templates
    [Parameter]
    private RenderFragment HeaderTemplate { get; set; }

    [Parameter]
    private RenderFragment<TItem> RowTemplate { get; set; }

    //Events
    [Parameter]
    private Action<TItem> OnSave { get; set; }

    [Parameter]
    private Action<TItem> OnDelete { get; set; }

    [Parameter]
    private Action<TItem> OnAdd { get; set; }

    private TItem NewItem { get; set; } = (TItem)Activator.CreateInstance(typeof(TItem));
}