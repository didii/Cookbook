@using System.Threading
<div ref="ToolbarContainer">
    <Toolbar Saved="@OnSave" Cancelled="@OnCancel"></Toolbar>
</div>
<div ref="ViewTemplateContainer">@ViewTemplate</div>
<div ref="EditTemplateContainer">@EditTemplate</div>

@functions {

    //Refs
    private ElementRef ToolbarContainer;
    private ElementRef ViewTemplateContainer;
    private ElementRef EditTemplateContainer;

    //Parameters
    [Parameter]
    private RenderFragment ViewTemplate { get; set; }

    [Parameter]
    private RenderFragment EditTemplate { get; set; }

    [Parameter]
    private Func<Task> SaveClicked { get; set; }

    [Parameter]
    private Func<Task> CancelClicked { get; set; }

    [Parameter]
    private Action Deleted { get; set; }

    //Lifecycle
    private bool _firstCall = true;

    protected override async Task OnAfterRenderAsync() {
        if (_firstCall) {
            _firstCall = false;
            await SetEditMode(false);
        }
    }

    //Public methods
    public async Task SetEditMode(bool on) {
        _isEdit = on;
        if (on)
            await SetEditModeOn();
        else
            await SetEditModeOff();
    }

    //Non-public methods
    private async Task OnSave() {
        await SaveClicked?.Invoke();
    }

    private async Task OnCancel() {
        await CancelClicked?.Invoke();
    }

    private bool _isEdit;
    protected virtual bool IsEdit { get; }

    protected virtual async Task SetEditModeOn() {
        await ToolbarContainer.Show();
        await ViewTemplateContainer.Hide();
        await EditTemplateContainer.Show();
    }

    protected virtual async Task SetEditModeOff() {
        await ToolbarContainer.Hide();
        await ViewTemplateContainer.Show();
        await EditTemplateContainer.Hide();
    }

}
