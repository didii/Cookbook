@page "/details/{idString}"
@inject IDetailsService _detailsService
@inject IRecipeClientService _recipeClientService

<div class="btn-group main-toolbar">
    @if (!_detailsService.IsEditMode) {
        <button onclick="@OnEditClick" title="Edit recipe" class="btn btn-link">
            <span class="fa fa-edit xxl"></span>
        </button>
    }
    else {
        <button onclick="@OnSave" title="Save changes" class="btn btn-success">
            <span class="fa fa-save xl"></span>
        </button>
        <button onclick="@OnRemove" title="Delete recipe" class="btn btn-danger">
            <span class="fa fa-ban xl"></span>
        </button>
        <button onclick="@OnDiscard" title="Discard changes" class="btn btn-secondary">
            <span class="fa fa-times xl"></span>
        </button>
    }
</div>

@if (Recipe == null) {
    <div class="page-loading-container">
        <div class="page-loading-block">
            <span class="fa fa-spinner fa-spin"></span>
        </div>
    </div>
}
else {
    <div class="container-tags">
        <DetailsTags Tags="Recipe.Tags"></DetailsTags>
    </div>
    <div class="container-heading">
        <DetailsHeading Recipe="Recipe"></DetailsHeading>
    </div>
}


@functions {

    protected override async Task OnInitAsync() {
        _detailsService.RecipeId = long.Parse(IdString);
        Recipe = await _recipeClientService.GetAsync(_detailsService.RecipeId);
        StateHasChanged();
    }

    private RecipeDto Recipe { get; set; }

    [Parameter]
    private string IdString { get; set; }

    private void OnEditClick() {
        _detailsService.IsEditMode = true;
    }

    private void OnSave() {
        Console.WriteLine("Saving");
        _detailsService.IsEditMode = false;
    }

    private void OnRemove() {
        Console.WriteLine("Removing");
    }

    private void OnDiscard() {
        Console.WriteLine("Discarding");
        _detailsService.Discard();
        _detailsService.IsEditMode = false;
    }

}