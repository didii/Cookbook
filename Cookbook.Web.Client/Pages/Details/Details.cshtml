@page "/details/{id:long}"
@inject IDetailsService _detailsService
@inject IRecipeClientService _recipeClientService
@inject IChangeTracker<RecipeUpdate> _changeTracker


@if (Recipe == null) {
    <div class="page-loading-container">
        <div class="page-loading-block">
            <span class="fa fa-spinner fa-spin"></span>
        </div>
    </div>
}
else {
    <div class="btn-group main-toolbar">
        @if (!_detailsService.IsEditMode) {
            <button onclick="@OnEditClick" title="Edit recipe" class="btn btn-link">
                <span class="fa fa-edit xxl"></span>
            </button>
        } else {
            <button onclick="@OnSave" title="Save changes" class="btn btn-success">
                <span class="fa fa-save xl"></span>
            </button>
            <button onclick="@OnRemove" title="Delete recipe" class="btn btn-danger">
                <span class="fa fa-ban xl"></span>
            </button>
            <button onclick="@OnDiscard" title="Discard changes" class="btn btn-secondary">
                <span class="fa fa-times xl"></span>
            </button>
        }
    </div>
    <div class="container-tags">
        <DetailsTags Tags="Recipe.Tags"></DetailsTags>
    </div>
    <div class="container-heading">
        <DetailsHeading Recipe="Recipe"></DetailsHeading>
    </div>
    <div class="row">
        <div class="col-md-7">
            <DetailsIngredients Ingredients="Recipe.Ingredients"></DetailsIngredients>
        </div>
        <div class="col-md-5">
            <DetailsPicture></DetailsPicture>
        </div>
    </div>
}


@functions {

    protected override async Task OnInitAsync() {
        _detailsService.RecipeId = Id;
        Recipe = await _recipeClientService.GetAsync(_detailsService.RecipeId);
        _changeTracker.Reset(Recipe.ToUpdate());
        StateHasChanged();
    }

    private RecipeDto Recipe { get; set; }

    [Parameter]
    private long Id {
        get { return _detailsService.RecipeId; }
        set { _detailsService.RecipeId = value; }
    }

    private void OnEditClick() {
        _detailsService.IsEditMode = true;
    }

    private async Task OnSave() {
        Console.WriteLine("Saving");
        Recipe = await _recipeClientService.PatchAsync(_detailsService.RecipeId, _changeTracker.PatchDocument.Operations);
        _changeTracker.Reset(Recipe.ToUpdate());
        _detailsService.IsEditMode = false;
    }

    private void OnRemove() {
        Console.WriteLine("Removing");
    }

    private void OnDiscard() {
        Console.WriteLine("Discarding");
        _detailsService.Discard();
        _detailsService.IsEditMode = false;
    }

}