@inject IDetailsService _detailsService
@inject ITagClientService TagClientService

<div>
    @foreach (var tag in Tags) {
        <div style="display: inline-block">
            <DetailsTag Tag="tag"
                        TagSet="@(async x => await OnTagSet(tag, x))"
                        TagRemoved="@(async x => await OnTagRemoved(x))">
            </DetailsTag>
        </div>
    }
    <div style="display: inline-block">
        <DetailsTag TagSet="@(async x => await OnTagAdded(x))"></DetailsTag>
    </div>
</div>

@functions {

    [Parameter]
    private ICollection<TagDto> Tags { get; set; }

    private async Task OnTagSet(TagDto tag, string newName) {
        await TagClientService.RemoveTagFromRecipe(_detailsService.RecipeId, tag.Id);
        await TagClientService.AddTagForRecipe(_detailsService.RecipeId, new TagEdit() { Name = newName });
    }

    private async Task OnTagRemoved(TagDto tag) {
        await TagClientService.RemoveTagFromRecipe(_detailsService.RecipeId, tag.Id);
        StateHasChanged();
    }

    private async Task OnTagAdded(string name) {
        await TagClientService.AddTagForRecipe(_detailsService.RecipeId, new TagEdit() { Name = name });
        Tags.Add(new TagDto() { Name = name });
        StateHasChanged();
    }

}