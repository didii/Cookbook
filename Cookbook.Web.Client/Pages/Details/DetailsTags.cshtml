@inject IDetailsService _detailsService
@inject ITagService _tagService

<div>
    @foreach (var tag in Tags) {
        <div style="display: inline-block">
            <DetailsTag Tag="tag"
                        TagSet="@OnTagSet(tag)"
                        TagRemoved="@OnTagRemoved">
            </DetailsTag>
        </div>
    }
        <div style="display: inline-block">
            <DetailsTag TagSet="@OnTagAdded"></DetailsTag>
        </div>
</div>

@functions {

    [Parameter]
    private ICollection<TagDto> Tags { get; set; }

    private Action<string> OnTagSet(TagDto tag) {
        return async name => {
            Console.WriteLine("Tag set");
            var removeTask = _tagService.RemoveTagFromRecipe(_detailsService.RecipeId, tag.Id);
            var setTask = _tagService.SetTagForRecipe(_detailsService.RecipeId, new TagEdit() { Name = name });
            await Task.WhenAll(removeTask, setTask);
        };
    }

    private void OnTagRemoved(TagDto tag) {
        Tags.Remove(tag);
        Console.WriteLine("Tag removed");
        StateHasChanged();
    }

    private void OnTagAdded(string name) {
        Tags.Add(new TagDto(){Name = name});
        StateHasChanged();
    }

}