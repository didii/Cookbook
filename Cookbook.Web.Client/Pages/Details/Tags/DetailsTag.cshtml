@inject IDetailsService _detailsService

<Toolbar ref="toolbar" CanRemove="@(Tag != null)" Saved="@Save" Removed="@OnRemove" Cancelled="@Cancel"></Toolbar>
<span ref="span" onclick="@SetEditMode" class="badge badge-info">
    @if (Tag != null) {
        @:@Tag.Name
    } else {
        @:+
    }
</span>
<input ref="input" bind="@InputName" onkeydown="@OnKeyDown" onkeyup="@OnKeyUp" maxlength="25" hidden class="input-badge badge-info"/>

@functions {

    // Parameters
    [Parameter]
    private TagDto Tag { get; set; }

    [Parameter]
    private Action<string> TagSet { get; set; }

    [Parameter]
    private Action<TagDto> TagRemoved { get; set; }

    [Parameter]
    private Action Next { get; set; }

    // Lifecycle methods
    private bool FirstCall { get; set; } = true;

    protected override void OnInit() {
        _detailsService.ComponentInEditModeChanged += OnComponentInEditModeChanged;
    }

    protected override void OnAfterRender() {
        if (FirstCall) {
            FirstCall = false;
            toolbar.Hide();
        }
    }

    // Public methods
    public async Task SetEditMode() {
        _detailsService.ComponentInEditMode = this;
        InputName = Tag?.Name ?? "";
        await span.Hide();
        toolbar.Show();
        await input.Show();
        await input.Focus();
    }

    public async Task Save() {
        TagSet?.Invoke(InputName);
        await Cancel();
    }

    public async Task Cancel() {
        toolbar.Hide();
        await input.Hide();
        await span.Show();
    }

    // Privates
    private string InputName { get; set; }

    private Toolbar toolbar;
    private ElementRef span;
    private ElementRef input;

    private async Task OnRemove() {
        TagRemoved?.Invoke(Tag);
        await Cancel();
    }

    private async Task OnKeyDown(UIKeyboardEventArgs args) {
        if (args.Key == "Tab") {
            Next?.Invoke();
        }
    }

    private async Task OnKeyUp(UIKeyboardEventArgs args) {
        if (args.Key == "Enter") {
            await Save();
        }
        else if (args.Key == "Escape") {
            await Cancel();
        }
    }

    private async Task OnComponentInEditModeChanged(BlazorComponent component) {
        if (component != this)
            await Cancel();
    }
}