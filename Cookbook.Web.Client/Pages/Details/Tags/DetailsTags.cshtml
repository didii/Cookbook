@inject IDetailsService _detailsService
@inject ITagClientService TagClientService

<div class="loading-container @IsLoadingClass">
    @foreach (var tag in Tags) {
        <div class="d-inline-block">
            <DetailsTag Tag="tag"
                        TagSet="@(async x => await OnTagSet(tag, x))"
                        TagRemoved="@(async x => await OnTagRemoved(x))">
            </DetailsTag>
        </div>
    }
    <div class="d-inline-block">
        <DetailsTag TagSet="@(async x => await OnTagAdded(x))"></DetailsTag>
    </div>
    <div class="loading-overlay text-center @IsLoadingClass"></div>
</div>

@functions {

    [Parameter]
    private IList<TagDto> Tags { get; set; }

    private async Task OnTagSet(TagDto tag, string newName) {
        IsLoading = true;
        await TagClientService.RemoveTagFromRecipeAsync(_detailsService.RecipeId, tag.Id);
        var newTag = await TagClientService.AddTagForRecipeAsync(_detailsService.RecipeId, new TagEdit() { Name = newName });
        Tags.ReplaceWithId(tag.Id, newTag);
        IsLoading = false;
    }

    private async Task OnTagRemoved(TagDto tag) {
        IsLoading = true;
        await TagClientService.RemoveTagFromRecipeAsync(_detailsService.RecipeId, tag.Id);
        Tags.RemoveWithId(tag.Id);
        IsLoading = false;
    }

    private async Task OnTagAdded(string name) {
        IsLoading = true;
        var newTag = await TagClientService.AddTagForRecipeAsync(_detailsService.RecipeId, new TagEdit() { Name = name });
        Tags.Add(newTag);
        IsLoading = false;
    }

    private bool _isLoading = false;

    private bool IsLoading {
        get => _isLoading;
        set {
            if (_isLoading != value) {
                _isLoading = value;
                StateHasChanged();
            }
        }
    }

    private string IsLoadingClass => IsLoading ? "is-loading " : "";
}